{"version":3,"sources":["countriesContext/index.js","countriesContext/useLocalStorage.js","CountriesSearch/styledP.js","CountriesSearch/index.js","client/index.js","bottons/styledButton.js","bottons/index.js","CountriesError/index.js","Loading/index.js","continents/styledContinent.js","lenguages/index.js","continents/index.js","App/AppUI.js","App/index.js","index.js"],"names":["ALL_COUNTRIES","gql","CountriesContext","React","createContext","CountriesProvider","props","queryRequire","useQuery","loading","error","data","useCards","useState","searchValue","setSearchValue","buttonActive","changeActive","searchedCards","length","countries","filter","cardText","name","toLowerCase","searchText","includes","Provider","value","children","Encabezado","styled","p","CountriesSearch","className","placeholder","onChange","event","console","log","target","clientUri","ApolloClient","uri","cache","InMemoryCache","Client","Container","Row","Contenedor","div","ButtonStyled","button","Buttons","clickk","tipo","onClick","Error","Loading","Spinner","animation","variant","TextGroupBy","h2","Lenguages","key","nombre","Continent","AppUI","useContext","Fragment","map","Col","md","lg","code","languages","continent","Card","bg","text","style","width","Header","emoji","Body","Text","native","capital","App","rootElement","document","getElementById","createRoot","render","ApolloProvider","client"],"mappings":"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","file":"static/js/main.b85d8049.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useCards } from './useLocalStorage';\r\nimport { gql} from \"@apollo/client\";\r\n\r\nconst ALL_COUNTRIES = gql`\r\n  query allCountries {countries{\r\n    code\r\n    name\r\n    native\r\n    capital\r\n    continent{\r\n      name\r\n    }\r\n    languages{\r\n      name\r\n    }\r\n    emoji\r\n    }\r\n  }\r\n  `;\r\n\r\nconst CountriesContext = React.createContext();\r\n\r\nfunction CountriesProvider(props) {\r\n  const {\r\n    data,\r\n    loading,\r\n    error\r\n  } = useCards(ALL_COUNTRIES);\r\n  const [searchValue, setSearchValue] = React.useState('');\r\n  const [buttonActive, changeActive] = React.useState('lenguaje');\r\n\r\n  \r\n\r\n  let searchedCards = [];\r\n\r\n    if(!loading){\r\n      if (!searchValue.length >= 1) {\r\n        searchedCards = data.countries;\r\n      } else {\r\n        searchedCards = data.countries.filter(countries => {\r\n          const cardText = countries.name.toLowerCase();\r\n          const searchText = searchValue.toLowerCase();\r\n          return cardText.includes(searchText);\r\n    \r\n        });\r\n      }\r\n    }\r\n\r\n\r\n  \r\n  return (\r\n    <CountriesContext.Provider value={{\r\n      searchValue,\r\n      setSearchValue,\r\n      searchedCards,\r\n      loading,\r\n      error,\r\n      buttonActive,\r\n       changeActive,\r\n    }}>\r\n      {props.children}\r\n    </CountriesContext.Provider>\r\n  );\r\n}\r\n\r\nexport { CountriesContext, CountriesProvider };\r\n","import { useQuery} from \"@apollo/client\";\r\n\r\n\r\n\r\nfunction useCards(queryRequire) {\r\n  const {loading, error, data } = useQuery(queryRequire);\r\n  \r\n\r\n  return {\r\n    data,\r\n    loading,\r\n    error\r\n  };\r\n}\r\n\r\nexport { useCards };\r\n","import styled from \"styled-components\";\r\n\r\nexport const Encabezado = styled.p`\r\n    font-size:50px;\r\n    text-align: center;\r\n    color: black;\r\n    font-weight: bold;\r\n\r\n`","import React from 'react';\r\nimport './CountriesSearch.css';\r\nimport {Encabezado} from './styledP';\r\n\r\nfunction CountriesSearch(props) {\r\n  const onSearchValueChange = (event) => {\r\n    console.log(event.target.value);\r\n    props.setSearchValue(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <><Encabezado>\r\n      Country Search\r\n    </Encabezado>\r\n    \r\n    <input\r\n        className=\"CountriesSearch\"\r\n        placeholder=\"SEARCH COUNTRIES\"\r\n        value={props.searchValue}\r\n        onChange={onSearchValueChange} /></>\r\n  );\r\n}\r\n\r\nexport { CountriesSearch };\r\n","import React from \"react\";\r\nimport {ApolloClient, InMemoryCache} from \"@apollo/client\";\r\nimport {Container, Row} from 'react-bootstrap';\r\n\r\n\r\nexport const clientUri = new ApolloClient({\r\n  uri: 'https://countries.trevorblades.com/',\r\n  cache: new InMemoryCache()\r\n});\r\n\r\n\r\nfunction Client (props){\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        {props.children}\r\n      </Row>\r\n    </Container>\r\n  );\r\n\r\n}\r\nexport {Client}\r\n\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Contenedor = styled.div`\r\n    margin: 10px;\r\n    text-align: center;\r\n    width: 100%;\r\n\r\n`;\r\nexport const ButtonStyled = styled.button`\r\n    background: #A3A2A2;\r\n    border-bottom: 5px solid #404040;\r\n    border-radius: 12px;\r\n    box-shadow: 6px 6px 6px #999;\r\n    color: #000;\r\n    cursor: pointer; \r\n    font-family: 'Raleway', Arial, Helvetica;\r\n    text-align: center;\r\n    transition: all 0.2s ease 0s;\r\n    margin: 10px;\r\n    width: 20%;\r\n    height: 55px;\r\n    text-align: center;\r\n    text-size-adjust: calc();\r\n    font-weight: bold;\r\n    &:focus {\r\n    //box-shadow: 0 0 0 2px white, 0 0 0 4px #0F0F0F;\r\n    background-color: #3C3C3C;\r\n    color: #fff;\r\n    border-bottom: 5px solid #1E1E1E;\r\n}\r\n\r\n`;","import React from 'react';\r\nimport {Contenedor, ButtonStyled} from './styledButton'\r\nimport {Encabezado } from '../CountriesSearch/styledP'\r\n\r\nfunction Buttons(props){\r\n\r\n    const clickk = (tipo) => {\r\n        props.changeActive(tipo);\r\n    }\r\n    \r\n    return (\r\n        <Contenedor>\r\n            <Encabezado>Group By:</Encabezado>\r\n            <ButtonStyled  onClick={()=>clickk(\"continente\")}>Continent</ButtonStyled>\r\n            <ButtonStyled  onClick={()=>clickk(\"lenguaje\")}>Lenguages</ButtonStyled>\r\n        </Contenedor>\r\n    );\r\n}\r\nexport {Buttons}","import React from 'react';\r\n\r\nfunction Error() {\r\n  return <p>Desesp√©rate, hubo un error...</p>;\r\n}\r\n\r\nexport { Error };\r\n","import React from 'react';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\n\r\nfunction Loading() {\r\n  return (   \r\n    <Spinner animation=\"border\" variant=\"primary\" />\r\n  );\r\n}\r\n\r\nexport { Loading };","import styled from \"styled-components\";\r\n\r\nexport const TextGroupBy = styled.h2`\r\n    font-size: 120%;\r\n    max-width: max-content;\r\n    \r\n`","import React from \"react\";\r\nimport {TextGroupBy} from '../continents/styledContinent'\r\n\r\nfunction Lenguages(props){\r\n    return(\r\n        <TextGroupBy key={props.key}>{props.nombre}</TextGroupBy>\r\n    );\r\n}\r\nexport {Lenguages}","import React from \"react\";\r\nimport {TextGroupBy} from \"./styledContinent\"\r\n\r\nfunction Continent(props){\r\n    return(\r\n        <TextGroupBy key={props.key}>{props.nombre}</TextGroupBy>\r\n    );\r\n}\r\nexport {Continent}","import React from 'react';\r\nimport { CountriesSearch } from '../CountriesSearch';\r\nimport {Client} from '../client'\r\nimport {Buttons} from '../bottons'\r\nimport { CountriesContext } from '../countriesContext';\r\nimport {Error} from '../CountriesError'\r\nimport {Loading} from '../Loading'\r\nimport {Lenguages} from '../lenguages'\r\nimport {Continent} from '../continents'\r\nimport {Card, Col} from 'react-bootstrap';\r\n\r\n\r\nfunction AppUI() {\r\n  const {\r\n    searchValue,\r\n    setSearchValue,\r\n    searchedCards,\r\n    loading,\r\n    error,\r\n    buttonActive,\r\n    changeActive,\r\n\r\n  } = React.useContext(CountriesContext);\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n      <CountriesSearch \r\n        searchValue={searchValue}\r\n        setSearchValue={setSearchValue} />\r\n\r\n\r\n      <Buttons changeActive={changeActive}/>\r\n\r\n\r\n      <Client>\r\n        {loading && <Loading />}\r\n        {error && <Error />}\r\n\r\n        {searchedCards.map(countries => (\r\n          <Col md={6} lg={4} key={countries.code}>\r\n\r\n              {buttonActive===\"continente\" && <Lenguages\r\n                key = {countries.languages.name}\r\n                code={countries.languages.name} \r\n                nombre={countries.continent.name}\r\n              />}\r\n\r\n              {buttonActive===\"lenguaje\" && <Continent \r\n                key={countries.languages.name} \r\n                nombre={countries.languages.map(languages => languages.name)}/>}\r\n\r\n              <Card className=\"border-dark mb-3\" bg=\"secondary\" text={\"dark\" === 'light' ? 'dark' : 'white'}  style={{ width: '18rem' }}>\r\n                <Card.Header className=\"d-flex justify-content-between\" bg=\"secondary\">\r\n                  <p>{countries.emoji}</p>\r\n                  <p>{countries.name}</p>\r\n                </Card.Header>\r\n                <Card.Body>\r\n                  <Card.Text className=\"d-flex justify-content-between\"> \r\n                    <p >NATIVE:</p>\r\n                    <p >{countries.native}</p>\r\n                  </Card.Text>\r\n                  <Card.Text className=\"d-flex justify-content-between\"> \r\n                    <p >CAPITAL:</p>\r\n                    <p >{countries.capital}</p>\r\n                  </Card.Text>\r\n                </Card.Body>\r\n              </Card>\r\n\r\n            </Col>\r\n        ))}\r\n      </Client>\r\n      \r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport { AppUI };\r\n","import React from 'react';\r\nimport { CountriesProvider } from '../countriesContext';\r\nimport { AppUI } from './AppUI';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <CountriesProvider>\r\n      <AppUI />\r\n    </CountriesProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport App from './App/index.js';\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport { clientUri } from './client'\r\nimport './index.css';\r\nimport { createRoot } from \"react-dom/client\" \r\n\r\nconst rootElement = document.getElementById('root');\r\nconst root = createRoot(rootElement);\r\n\r\nroot.render(\r\n  <ApolloProvider client={clientUri}>\r\n    <App />\r\n  </ApolloProvider>,\r\n);"],"sourceRoot":""}